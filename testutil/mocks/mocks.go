// Code generated by MockGen. DO NOT EDIT.
// Source: expected_mocks.go
//
// Generated by this command:
//
//	mockgen -source=expected_mocks.go
//

// Package mock_mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	tx "github.com/cosmos/cosmos-sdk/types/tx"
	types "github.com/cosmos/cosmos-sdk/x/auth/types"
	types0 "github.com/jackalLabs/canine-chain/v4/x/storage/types"
	bytes "github.com/tendermint/tendermint/libs/bytes"
	log "github.com/tendermint/tendermint/libs/log"
	client "github.com/tendermint/tendermint/rpc/client"
	coretypes "github.com/tendermint/tendermint/rpc/core/types"
	types1 "github.com/tendermint/tendermint/types"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockAuthQueryClient is a mock of AuthQueryClient interface.
type MockAuthQueryClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthQueryClientMockRecorder
	isgomock struct{}
}

// MockAuthQueryClientMockRecorder is the mock recorder for MockAuthQueryClient.
type MockAuthQueryClientMockRecorder struct {
	mock *MockAuthQueryClient
}

// NewMockAuthQueryClient creates a new mock instance.
func NewMockAuthQueryClient(ctrl *gomock.Controller) *MockAuthQueryClient {
	mock := &MockAuthQueryClient{ctrl: ctrl}
	mock.recorder = &MockAuthQueryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthQueryClient) EXPECT() *MockAuthQueryClientMockRecorder {
	return m.recorder
}

// Account mocks base method.
func (m *MockAuthQueryClient) Account(ctx context.Context, in *types.QueryAccountRequest, opts ...grpc.CallOption) (*types.QueryAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Account", varargs...)
	ret0, _ := ret[0].(*types.QueryAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Account indicates an expected call of Account.
func (mr *MockAuthQueryClientMockRecorder) Account(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Account", reflect.TypeOf((*MockAuthQueryClient)(nil).Account), varargs...)
}

// Accounts mocks base method.
func (m *MockAuthQueryClient) Accounts(ctx context.Context, in *types.QueryAccountsRequest, opts ...grpc.CallOption) (*types.QueryAccountsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Accounts", varargs...)
	ret0, _ := ret[0].(*types.QueryAccountsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Accounts indicates an expected call of Accounts.
func (mr *MockAuthQueryClientMockRecorder) Accounts(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accounts", reflect.TypeOf((*MockAuthQueryClient)(nil).Accounts), varargs...)
}

// ModuleAccountByName mocks base method.
func (m *MockAuthQueryClient) ModuleAccountByName(ctx context.Context, in *types.QueryModuleAccountByNameRequest, opts ...grpc.CallOption) (*types.QueryModuleAccountByNameResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModuleAccountByName", varargs...)
	ret0, _ := ret[0].(*types.QueryModuleAccountByNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModuleAccountByName indicates an expected call of ModuleAccountByName.
func (mr *MockAuthQueryClientMockRecorder) ModuleAccountByName(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModuleAccountByName", reflect.TypeOf((*MockAuthQueryClient)(nil).ModuleAccountByName), varargs...)
}

// Params mocks base method.
func (m *MockAuthQueryClient) Params(ctx context.Context, in *types.QueryParamsRequest, opts ...grpc.CallOption) (*types.QueryParamsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Params", varargs...)
	ret0, _ := ret[0].(*types.QueryParamsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Params indicates an expected call of Params.
func (mr *MockAuthQueryClientMockRecorder) Params(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Params", reflect.TypeOf((*MockAuthQueryClient)(nil).Params), varargs...)
}

// MockServiceClient is a mock of ServiceClient interface.
type MockServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockServiceClientMockRecorder
	isgomock struct{}
}

// MockServiceClientMockRecorder is the mock recorder for MockServiceClient.
type MockServiceClientMockRecorder struct {
	mock *MockServiceClient
}

// NewMockServiceClient creates a new mock instance.
func NewMockServiceClient(ctrl *gomock.Controller) *MockServiceClient {
	mock := &MockServiceClient{ctrl: ctrl}
	mock.recorder = &MockServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceClient) EXPECT() *MockServiceClientMockRecorder {
	return m.recorder
}

// BroadcastTx mocks base method.
func (m *MockServiceClient) BroadcastTx(ctx context.Context, in *tx.BroadcastTxRequest, opts ...grpc.CallOption) (*tx.BroadcastTxResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BroadcastTx", varargs...)
	ret0, _ := ret[0].(*tx.BroadcastTxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BroadcastTx indicates an expected call of BroadcastTx.
func (mr *MockServiceClientMockRecorder) BroadcastTx(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastTx", reflect.TypeOf((*MockServiceClient)(nil).BroadcastTx), varargs...)
}

// GetBlockWithTxs mocks base method.
func (m *MockServiceClient) GetBlockWithTxs(ctx context.Context, in *tx.GetBlockWithTxsRequest, opts ...grpc.CallOption) (*tx.GetBlockWithTxsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockWithTxs", varargs...)
	ret0, _ := ret[0].(*tx.GetBlockWithTxsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockWithTxs indicates an expected call of GetBlockWithTxs.
func (mr *MockServiceClientMockRecorder) GetBlockWithTxs(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockWithTxs", reflect.TypeOf((*MockServiceClient)(nil).GetBlockWithTxs), varargs...)
}

// GetTx mocks base method.
func (m *MockServiceClient) GetTx(ctx context.Context, in *tx.GetTxRequest, opts ...grpc.CallOption) (*tx.GetTxResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTx", varargs...)
	ret0, _ := ret[0].(*tx.GetTxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTx indicates an expected call of GetTx.
func (mr *MockServiceClientMockRecorder) GetTx(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTx", reflect.TypeOf((*MockServiceClient)(nil).GetTx), varargs...)
}

// GetTxsEvent mocks base method.
func (m *MockServiceClient) GetTxsEvent(ctx context.Context, in *tx.GetTxsEventRequest, opts ...grpc.CallOption) (*tx.GetTxsEventResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTxsEvent", varargs...)
	ret0, _ := ret[0].(*tx.GetTxsEventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTxsEvent indicates an expected call of GetTxsEvent.
func (mr *MockServiceClientMockRecorder) GetTxsEvent(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxsEvent", reflect.TypeOf((*MockServiceClient)(nil).GetTxsEvent), varargs...)
}

// Simulate mocks base method.
func (m *MockServiceClient) Simulate(ctx context.Context, in *tx.SimulateRequest, opts ...grpc.CallOption) (*tx.SimulateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Simulate", varargs...)
	ret0, _ := ret[0].(*tx.SimulateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Simulate indicates an expected call of Simulate.
func (mr *MockServiceClientMockRecorder) Simulate(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Simulate", reflect.TypeOf((*MockServiceClient)(nil).Simulate), varargs...)
}

// MockRPCClient is a mock of RPCClient interface.
type MockRPCClient struct {
	ctrl     *gomock.Controller
	recorder *MockRPCClientMockRecorder
	isgomock struct{}
}

// MockRPCClientMockRecorder is the mock recorder for MockRPCClient.
type MockRPCClientMockRecorder struct {
	mock *MockRPCClient
}

// NewMockRPCClient creates a new mock instance.
func NewMockRPCClient(ctrl *gomock.Controller) *MockRPCClient {
	mock := &MockRPCClient{ctrl: ctrl}
	mock.recorder = &MockRPCClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRPCClient) EXPECT() *MockRPCClientMockRecorder {
	return m.recorder
}

// ABCIInfo mocks base method.
func (m *MockRPCClient) ABCIInfo(arg0 context.Context) (*coretypes.ResultABCIInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ABCIInfo", arg0)
	ret0, _ := ret[0].(*coretypes.ResultABCIInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ABCIInfo indicates an expected call of ABCIInfo.
func (mr *MockRPCClientMockRecorder) ABCIInfo(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ABCIInfo", reflect.TypeOf((*MockRPCClient)(nil).ABCIInfo), arg0)
}

// ABCIQuery mocks base method.
func (m *MockRPCClient) ABCIQuery(ctx context.Context, path string, data bytes.HexBytes) (*coretypes.ResultABCIQuery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ABCIQuery", ctx, path, data)
	ret0, _ := ret[0].(*coretypes.ResultABCIQuery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ABCIQuery indicates an expected call of ABCIQuery.
func (mr *MockRPCClientMockRecorder) ABCIQuery(ctx, path, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ABCIQuery", reflect.TypeOf((*MockRPCClient)(nil).ABCIQuery), ctx, path, data)
}

// ABCIQueryWithOptions mocks base method.
func (m *MockRPCClient) ABCIQueryWithOptions(ctx context.Context, path string, data bytes.HexBytes, opts client.ABCIQueryOptions) (*coretypes.ResultABCIQuery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ABCIQueryWithOptions", ctx, path, data, opts)
	ret0, _ := ret[0].(*coretypes.ResultABCIQuery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ABCIQueryWithOptions indicates an expected call of ABCIQueryWithOptions.
func (mr *MockRPCClientMockRecorder) ABCIQueryWithOptions(ctx, path, data, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ABCIQueryWithOptions", reflect.TypeOf((*MockRPCClient)(nil).ABCIQueryWithOptions), ctx, path, data, opts)
}

// Block mocks base method.
func (m *MockRPCClient) Block(ctx context.Context, height *int64) (*coretypes.ResultBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Block", ctx, height)
	ret0, _ := ret[0].(*coretypes.ResultBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Block indicates an expected call of Block.
func (mr *MockRPCClientMockRecorder) Block(ctx, height any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Block", reflect.TypeOf((*MockRPCClient)(nil).Block), ctx, height)
}

// BlockByHash mocks base method.
func (m *MockRPCClient) BlockByHash(ctx context.Context, hash []byte) (*coretypes.ResultBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockByHash", ctx, hash)
	ret0, _ := ret[0].(*coretypes.ResultBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockByHash indicates an expected call of BlockByHash.
func (mr *MockRPCClientMockRecorder) BlockByHash(ctx, hash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockByHash", reflect.TypeOf((*MockRPCClient)(nil).BlockByHash), ctx, hash)
}

// BlockResults mocks base method.
func (m *MockRPCClient) BlockResults(ctx context.Context, height *int64) (*coretypes.ResultBlockResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockResults", ctx, height)
	ret0, _ := ret[0].(*coretypes.ResultBlockResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockResults indicates an expected call of BlockResults.
func (mr *MockRPCClientMockRecorder) BlockResults(ctx, height any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockResults", reflect.TypeOf((*MockRPCClient)(nil).BlockResults), ctx, height)
}

// BlockSearch mocks base method.
func (m *MockRPCClient) BlockSearch(ctx context.Context, query string, page, perPage *int, orderBy string) (*coretypes.ResultBlockSearch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockSearch", ctx, query, page, perPage, orderBy)
	ret0, _ := ret[0].(*coretypes.ResultBlockSearch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockSearch indicates an expected call of BlockSearch.
func (mr *MockRPCClientMockRecorder) BlockSearch(ctx, query, page, perPage, orderBy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockSearch", reflect.TypeOf((*MockRPCClient)(nil).BlockSearch), ctx, query, page, perPage, orderBy)
}

// BlockchainInfo mocks base method.
func (m *MockRPCClient) BlockchainInfo(ctx context.Context, minHeight, maxHeight int64) (*coretypes.ResultBlockchainInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockchainInfo", ctx, minHeight, maxHeight)
	ret0, _ := ret[0].(*coretypes.ResultBlockchainInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockchainInfo indicates an expected call of BlockchainInfo.
func (mr *MockRPCClientMockRecorder) BlockchainInfo(ctx, minHeight, maxHeight any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockchainInfo", reflect.TypeOf((*MockRPCClient)(nil).BlockchainInfo), ctx, minHeight, maxHeight)
}

// BroadcastEvidence mocks base method.
func (m *MockRPCClient) BroadcastEvidence(arg0 context.Context, arg1 types1.Evidence) (*coretypes.ResultBroadcastEvidence, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BroadcastEvidence", arg0, arg1)
	ret0, _ := ret[0].(*coretypes.ResultBroadcastEvidence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BroadcastEvidence indicates an expected call of BroadcastEvidence.
func (mr *MockRPCClientMockRecorder) BroadcastEvidence(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastEvidence", reflect.TypeOf((*MockRPCClient)(nil).BroadcastEvidence), arg0, arg1)
}

// BroadcastTxAsync mocks base method.
func (m *MockRPCClient) BroadcastTxAsync(arg0 context.Context, arg1 types1.Tx) (*coretypes.ResultBroadcastTx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BroadcastTxAsync", arg0, arg1)
	ret0, _ := ret[0].(*coretypes.ResultBroadcastTx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BroadcastTxAsync indicates an expected call of BroadcastTxAsync.
func (mr *MockRPCClientMockRecorder) BroadcastTxAsync(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastTxAsync", reflect.TypeOf((*MockRPCClient)(nil).BroadcastTxAsync), arg0, arg1)
}

// BroadcastTxCommit mocks base method.
func (m *MockRPCClient) BroadcastTxCommit(arg0 context.Context, arg1 types1.Tx) (*coretypes.ResultBroadcastTxCommit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BroadcastTxCommit", arg0, arg1)
	ret0, _ := ret[0].(*coretypes.ResultBroadcastTxCommit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BroadcastTxCommit indicates an expected call of BroadcastTxCommit.
func (mr *MockRPCClientMockRecorder) BroadcastTxCommit(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastTxCommit", reflect.TypeOf((*MockRPCClient)(nil).BroadcastTxCommit), arg0, arg1)
}

// BroadcastTxSync mocks base method.
func (m *MockRPCClient) BroadcastTxSync(arg0 context.Context, arg1 types1.Tx) (*coretypes.ResultBroadcastTx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BroadcastTxSync", arg0, arg1)
	ret0, _ := ret[0].(*coretypes.ResultBroadcastTx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BroadcastTxSync indicates an expected call of BroadcastTxSync.
func (mr *MockRPCClientMockRecorder) BroadcastTxSync(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastTxSync", reflect.TypeOf((*MockRPCClient)(nil).BroadcastTxSync), arg0, arg1)
}

// CheckTx mocks base method.
func (m *MockRPCClient) CheckTx(arg0 context.Context, arg1 types1.Tx) (*coretypes.ResultCheckTx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckTx", arg0, arg1)
	ret0, _ := ret[0].(*coretypes.ResultCheckTx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckTx indicates an expected call of CheckTx.
func (mr *MockRPCClientMockRecorder) CheckTx(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckTx", reflect.TypeOf((*MockRPCClient)(nil).CheckTx), arg0, arg1)
}

// Commit mocks base method.
func (m *MockRPCClient) Commit(ctx context.Context, height *int64) (*coretypes.ResultCommit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", ctx, height)
	ret0, _ := ret[0].(*coretypes.ResultCommit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Commit indicates an expected call of Commit.
func (mr *MockRPCClientMockRecorder) Commit(ctx, height any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockRPCClient)(nil).Commit), ctx, height)
}

// ConsensusParams mocks base method.
func (m *MockRPCClient) ConsensusParams(ctx context.Context, height *int64) (*coretypes.ResultConsensusParams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsensusParams", ctx, height)
	ret0, _ := ret[0].(*coretypes.ResultConsensusParams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConsensusParams indicates an expected call of ConsensusParams.
func (mr *MockRPCClientMockRecorder) ConsensusParams(ctx, height any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsensusParams", reflect.TypeOf((*MockRPCClient)(nil).ConsensusParams), ctx, height)
}

// ConsensusState mocks base method.
func (m *MockRPCClient) ConsensusState(arg0 context.Context) (*coretypes.ResultConsensusState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsensusState", arg0)
	ret0, _ := ret[0].(*coretypes.ResultConsensusState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConsensusState indicates an expected call of ConsensusState.
func (mr *MockRPCClientMockRecorder) ConsensusState(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsensusState", reflect.TypeOf((*MockRPCClient)(nil).ConsensusState), arg0)
}

// DumpConsensusState mocks base method.
func (m *MockRPCClient) DumpConsensusState(arg0 context.Context) (*coretypes.ResultDumpConsensusState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DumpConsensusState", arg0)
	ret0, _ := ret[0].(*coretypes.ResultDumpConsensusState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DumpConsensusState indicates an expected call of DumpConsensusState.
func (mr *MockRPCClientMockRecorder) DumpConsensusState(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DumpConsensusState", reflect.TypeOf((*MockRPCClient)(nil).DumpConsensusState), arg0)
}

// Genesis mocks base method.
func (m *MockRPCClient) Genesis(arg0 context.Context) (*coretypes.ResultGenesis, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Genesis", arg0)
	ret0, _ := ret[0].(*coretypes.ResultGenesis)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Genesis indicates an expected call of Genesis.
func (mr *MockRPCClientMockRecorder) Genesis(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Genesis", reflect.TypeOf((*MockRPCClient)(nil).Genesis), arg0)
}

// GenesisChunked mocks base method.
func (m *MockRPCClient) GenesisChunked(arg0 context.Context, arg1 uint) (*coretypes.ResultGenesisChunk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenesisChunked", arg0, arg1)
	ret0, _ := ret[0].(*coretypes.ResultGenesisChunk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenesisChunked indicates an expected call of GenesisChunked.
func (mr *MockRPCClientMockRecorder) GenesisChunked(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenesisChunked", reflect.TypeOf((*MockRPCClient)(nil).GenesisChunked), arg0, arg1)
}

// Health mocks base method.
func (m *MockRPCClient) Health(arg0 context.Context) (*coretypes.ResultHealth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health", arg0)
	ret0, _ := ret[0].(*coretypes.ResultHealth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Health indicates an expected call of Health.
func (mr *MockRPCClientMockRecorder) Health(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockRPCClient)(nil).Health), arg0)
}

// IsRunning mocks base method.
func (m *MockRPCClient) IsRunning() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRunning")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRunning indicates an expected call of IsRunning.
func (mr *MockRPCClientMockRecorder) IsRunning() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRunning", reflect.TypeOf((*MockRPCClient)(nil).IsRunning))
}

// NetInfo mocks base method.
func (m *MockRPCClient) NetInfo(arg0 context.Context) (*coretypes.ResultNetInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetInfo", arg0)
	ret0, _ := ret[0].(*coretypes.ResultNetInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetInfo indicates an expected call of NetInfo.
func (mr *MockRPCClientMockRecorder) NetInfo(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetInfo", reflect.TypeOf((*MockRPCClient)(nil).NetInfo), arg0)
}

// NumUnconfirmedTxs mocks base method.
func (m *MockRPCClient) NumUnconfirmedTxs(arg0 context.Context) (*coretypes.ResultUnconfirmedTxs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumUnconfirmedTxs", arg0)
	ret0, _ := ret[0].(*coretypes.ResultUnconfirmedTxs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumUnconfirmedTxs indicates an expected call of NumUnconfirmedTxs.
func (mr *MockRPCClientMockRecorder) NumUnconfirmedTxs(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumUnconfirmedTxs", reflect.TypeOf((*MockRPCClient)(nil).NumUnconfirmedTxs), arg0)
}

// OnReset mocks base method.
func (m *MockRPCClient) OnReset() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnReset")
	ret0, _ := ret[0].(error)
	return ret0
}

// OnReset indicates an expected call of OnReset.
func (mr *MockRPCClientMockRecorder) OnReset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnReset", reflect.TypeOf((*MockRPCClient)(nil).OnReset))
}

// OnStart mocks base method.
func (m *MockRPCClient) OnStart() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnStart")
	ret0, _ := ret[0].(error)
	return ret0
}

// OnStart indicates an expected call of OnStart.
func (mr *MockRPCClientMockRecorder) OnStart() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnStart", reflect.TypeOf((*MockRPCClient)(nil).OnStart))
}

// OnStop mocks base method.
func (m *MockRPCClient) OnStop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnStop")
}

// OnStop indicates an expected call of OnStop.
func (mr *MockRPCClientMockRecorder) OnStop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnStop", reflect.TypeOf((*MockRPCClient)(nil).OnStop))
}

// Quit mocks base method.
func (m *MockRPCClient) Quit() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Quit")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Quit indicates an expected call of Quit.
func (mr *MockRPCClientMockRecorder) Quit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Quit", reflect.TypeOf((*MockRPCClient)(nil).Quit))
}

// Reset mocks base method.
func (m *MockRPCClient) Reset() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset")
	ret0, _ := ret[0].(error)
	return ret0
}

// Reset indicates an expected call of Reset.
func (mr *MockRPCClientMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockRPCClient)(nil).Reset))
}

// SetLogger mocks base method.
func (m *MockRPCClient) SetLogger(arg0 log.Logger) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLogger", arg0)
}

// SetLogger indicates an expected call of SetLogger.
func (mr *MockRPCClientMockRecorder) SetLogger(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogger", reflect.TypeOf((*MockRPCClient)(nil).SetLogger), arg0)
}

// Start mocks base method.
func (m *MockRPCClient) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockRPCClientMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockRPCClient)(nil).Start))
}

// Status mocks base method.
func (m *MockRPCClient) Status(arg0 context.Context) (*coretypes.ResultStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", arg0)
	ret0, _ := ret[0].(*coretypes.ResultStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockRPCClientMockRecorder) Status(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockRPCClient)(nil).Status), arg0)
}

// Stop mocks base method.
func (m *MockRPCClient) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockRPCClientMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockRPCClient)(nil).Stop))
}

// String mocks base method.
func (m *MockRPCClient) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockRPCClientMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockRPCClient)(nil).String))
}

// Subscribe mocks base method.
func (m *MockRPCClient) Subscribe(ctx context.Context, subscriber, query string, outCapacity ...int) (<-chan coretypes.ResultEvent, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, subscriber, query}
	for _, a := range outCapacity {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Subscribe", varargs...)
	ret0, _ := ret[0].(<-chan coretypes.ResultEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockRPCClientMockRecorder) Subscribe(ctx, subscriber, query any, outCapacity ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, subscriber, query}, outCapacity...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockRPCClient)(nil).Subscribe), varargs...)
}

// Tx mocks base method.
func (m *MockRPCClient) Tx(ctx context.Context, hash []byte, prove bool) (*coretypes.ResultTx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tx", ctx, hash, prove)
	ret0, _ := ret[0].(*coretypes.ResultTx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tx indicates an expected call of Tx.
func (mr *MockRPCClientMockRecorder) Tx(ctx, hash, prove any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tx", reflect.TypeOf((*MockRPCClient)(nil).Tx), ctx, hash, prove)
}

// TxSearch mocks base method.
func (m *MockRPCClient) TxSearch(ctx context.Context, query string, prove bool, page, perPage *int, orderBy string) (*coretypes.ResultTxSearch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxSearch", ctx, query, prove, page, perPage, orderBy)
	ret0, _ := ret[0].(*coretypes.ResultTxSearch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TxSearch indicates an expected call of TxSearch.
func (mr *MockRPCClientMockRecorder) TxSearch(ctx, query, prove, page, perPage, orderBy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxSearch", reflect.TypeOf((*MockRPCClient)(nil).TxSearch), ctx, query, prove, page, perPage, orderBy)
}

// UnconfirmedTxs mocks base method.
func (m *MockRPCClient) UnconfirmedTxs(ctx context.Context, limit *int) (*coretypes.ResultUnconfirmedTxs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnconfirmedTxs", ctx, limit)
	ret0, _ := ret[0].(*coretypes.ResultUnconfirmedTxs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnconfirmedTxs indicates an expected call of UnconfirmedTxs.
func (mr *MockRPCClientMockRecorder) UnconfirmedTxs(ctx, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnconfirmedTxs", reflect.TypeOf((*MockRPCClient)(nil).UnconfirmedTxs), ctx, limit)
}

// Unsubscribe mocks base method.
func (m *MockRPCClient) Unsubscribe(ctx context.Context, subscriber, query string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsubscribe", ctx, subscriber, query)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockRPCClientMockRecorder) Unsubscribe(ctx, subscriber, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockRPCClient)(nil).Unsubscribe), ctx, subscriber, query)
}

// UnsubscribeAll mocks base method.
func (m *MockRPCClient) UnsubscribeAll(ctx context.Context, subscriber string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnsubscribeAll", ctx, subscriber)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnsubscribeAll indicates an expected call of UnsubscribeAll.
func (mr *MockRPCClientMockRecorder) UnsubscribeAll(ctx, subscriber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsubscribeAll", reflect.TypeOf((*MockRPCClient)(nil).UnsubscribeAll), ctx, subscriber)
}

// Validators mocks base method.
func (m *MockRPCClient) Validators(ctx context.Context, height *int64, page, perPage *int) (*coretypes.ResultValidators, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validators", ctx, height, page, perPage)
	ret0, _ := ret[0].(*coretypes.ResultValidators)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validators indicates an expected call of Validators.
func (mr *MockRPCClientMockRecorder) Validators(ctx, height, page, perPage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validators", reflect.TypeOf((*MockRPCClient)(nil).Validators), ctx, height, page, perPage)
}

// MockGRPCConn is a mock of GRPCConn interface.
type MockGRPCConn struct {
	ctrl     *gomock.Controller
	recorder *MockGRPCConnMockRecorder
	isgomock struct{}
}

// MockGRPCConnMockRecorder is the mock recorder for MockGRPCConn.
type MockGRPCConnMockRecorder struct {
	mock *MockGRPCConn
}

// NewMockGRPCConn creates a new mock instance.
func NewMockGRPCConn(ctrl *gomock.Controller) *MockGRPCConn {
	mock := &MockGRPCConn{ctrl: ctrl}
	mock.recorder = &MockGRPCConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGRPCConn) EXPECT() *MockGRPCConnMockRecorder {
	return m.recorder
}

// Invoke mocks base method.
func (m *MockGRPCConn) Invoke(ctx context.Context, method string, args, reply any, opts ...grpc.CallOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, method, args, reply}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Invoke", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Invoke indicates an expected call of Invoke.
func (mr *MockGRPCConnMockRecorder) Invoke(ctx, method, args, reply any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, method, args, reply}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invoke", reflect.TypeOf((*MockGRPCConn)(nil).Invoke), varargs...)
}

// NewStream mocks base method.
func (m *MockGRPCConn) NewStream(ctx context.Context, desc *grpc.StreamDesc, method string, opts ...grpc.CallOption) (grpc.ClientStream, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, desc, method}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewStream", varargs...)
	ret0, _ := ret[0].(grpc.ClientStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewStream indicates an expected call of NewStream.
func (mr *MockGRPCConnMockRecorder) NewStream(ctx, desc, method any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, desc, method}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewStream", reflect.TypeOf((*MockGRPCConn)(nil).NewStream), varargs...)
}

// MockStorageQueryClient is a mock of StorageQueryClient interface.
type MockStorageQueryClient struct {
	ctrl     *gomock.Controller
	recorder *MockStorageQueryClientMockRecorder
	isgomock struct{}
}

// MockStorageQueryClientMockRecorder is the mock recorder for MockStorageQueryClient.
type MockStorageQueryClientMockRecorder struct {
	mock *MockStorageQueryClient
}

// NewMockStorageQueryClient creates a new mock instance.
func NewMockStorageQueryClient(ctrl *gomock.Controller) *MockStorageQueryClient {
	mock := &MockStorageQueryClient{ctrl: ctrl}
	mock.recorder = &MockStorageQueryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageQueryClient) EXPECT() *MockStorageQueryClientMockRecorder {
	return m.recorder
}

// ActiveProviders mocks base method.
func (m *MockStorageQueryClient) ActiveProviders(ctx context.Context, in *types0.QueryActiveProviders, opts ...grpc.CallOption) (*types0.QueryActiveProvidersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ActiveProviders", varargs...)
	ret0, _ := ret[0].(*types0.QueryActiveProvidersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActiveProviders indicates an expected call of ActiveProviders.
func (mr *MockStorageQueryClientMockRecorder) ActiveProviders(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActiveProviders", reflect.TypeOf((*MockStorageQueryClient)(nil).ActiveProviders), varargs...)
}

// AllAttestations mocks base method.
func (m *MockStorageQueryClient) AllAttestations(ctx context.Context, in *types0.QueryAllAttestations, opts ...grpc.CallOption) (*types0.QueryAllAttestationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AllAttestations", varargs...)
	ret0, _ := ret[0].(*types0.QueryAllAttestationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllAttestations indicates an expected call of AllAttestations.
func (mr *MockStorageQueryClientMockRecorder) AllAttestations(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllAttestations", reflect.TypeOf((*MockStorageQueryClient)(nil).AllAttestations), varargs...)
}

// AllFiles mocks base method.
func (m *MockStorageQueryClient) AllFiles(ctx context.Context, in *types0.QueryAllFiles, opts ...grpc.CallOption) (*types0.QueryAllFilesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AllFiles", varargs...)
	ret0, _ := ret[0].(*types0.QueryAllFilesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllFiles indicates an expected call of AllFiles.
func (mr *MockStorageQueryClientMockRecorder) AllFiles(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllFiles", reflect.TypeOf((*MockStorageQueryClient)(nil).AllFiles), varargs...)
}

// AllFilesByMerkle mocks base method.
func (m *MockStorageQueryClient) AllFilesByMerkle(ctx context.Context, in *types0.QueryAllFilesByMerkle, opts ...grpc.CallOption) (*types0.QueryAllFilesByMerkleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AllFilesByMerkle", varargs...)
	ret0, _ := ret[0].(*types0.QueryAllFilesByMerkleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllFilesByMerkle indicates an expected call of AllFilesByMerkle.
func (mr *MockStorageQueryClientMockRecorder) AllFilesByMerkle(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllFilesByMerkle", reflect.TypeOf((*MockStorageQueryClient)(nil).AllFilesByMerkle), varargs...)
}

// AllFilesByOwner mocks base method.
func (m *MockStorageQueryClient) AllFilesByOwner(ctx context.Context, in *types0.QueryAllFilesByOwner, opts ...grpc.CallOption) (*types0.QueryAllFilesByOwnerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AllFilesByOwner", varargs...)
	ret0, _ := ret[0].(*types0.QueryAllFilesByOwnerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllFilesByOwner indicates an expected call of AllFilesByOwner.
func (mr *MockStorageQueryClientMockRecorder) AllFilesByOwner(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllFilesByOwner", reflect.TypeOf((*MockStorageQueryClient)(nil).AllFilesByOwner), varargs...)
}

// AllProofs mocks base method.
func (m *MockStorageQueryClient) AllProofs(ctx context.Context, in *types0.QueryAllProofs, opts ...grpc.CallOption) (*types0.QueryAllProofsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AllProofs", varargs...)
	ret0, _ := ret[0].(*types0.QueryAllProofsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllProofs indicates an expected call of AllProofs.
func (mr *MockStorageQueryClientMockRecorder) AllProofs(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllProofs", reflect.TypeOf((*MockStorageQueryClient)(nil).AllProofs), varargs...)
}

// AllProviders mocks base method.
func (m *MockStorageQueryClient) AllProviders(ctx context.Context, in *types0.QueryAllProviders, opts ...grpc.CallOption) (*types0.QueryAllProvidersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AllProviders", varargs...)
	ret0, _ := ret[0].(*types0.QueryAllProvidersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllProviders indicates an expected call of AllProviders.
func (mr *MockStorageQueryClientMockRecorder) AllProviders(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllProviders", reflect.TypeOf((*MockStorageQueryClient)(nil).AllProviders), varargs...)
}

// AllReports mocks base method.
func (m *MockStorageQueryClient) AllReports(ctx context.Context, in *types0.QueryAllReports, opts ...grpc.CallOption) (*types0.QueryAllReportsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AllReports", varargs...)
	ret0, _ := ret[0].(*types0.QueryAllReportsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllReports indicates an expected call of AllReports.
func (mr *MockStorageQueryClientMockRecorder) AllReports(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllReports", reflect.TypeOf((*MockStorageQueryClient)(nil).AllReports), varargs...)
}

// AllStoragePaymentInfo mocks base method.
func (m *MockStorageQueryClient) AllStoragePaymentInfo(ctx context.Context, in *types0.QueryAllStoragePaymentInfo, opts ...grpc.CallOption) (*types0.QueryAllStoragePaymentInfoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AllStoragePaymentInfo", varargs...)
	ret0, _ := ret[0].(*types0.QueryAllStoragePaymentInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllStoragePaymentInfo indicates an expected call of AllStoragePaymentInfo.
func (mr *MockStorageQueryClientMockRecorder) AllStoragePaymentInfo(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllStoragePaymentInfo", reflect.TypeOf((*MockStorageQueryClient)(nil).AllStoragePaymentInfo), varargs...)
}

// Attestation mocks base method.
func (m *MockStorageQueryClient) Attestation(ctx context.Context, in *types0.QueryAttestation, opts ...grpc.CallOption) (*types0.QueryAttestationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Attestation", varargs...)
	ret0, _ := ret[0].(*types0.QueryAttestationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Attestation indicates an expected call of Attestation.
func (mr *MockStorageQueryClientMockRecorder) Attestation(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attestation", reflect.TypeOf((*MockStorageQueryClient)(nil).Attestation), varargs...)
}

// AvailableSpace mocks base method.
func (m *MockStorageQueryClient) AvailableSpace(ctx context.Context, in *types0.QueryAvailableSpace, opts ...grpc.CallOption) (*types0.QueryAvailableSpaceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AvailableSpace", varargs...)
	ret0, _ := ret[0].(*types0.QueryAvailableSpaceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AvailableSpace indicates an expected call of AvailableSpace.
func (mr *MockStorageQueryClientMockRecorder) AvailableSpace(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvailableSpace", reflect.TypeOf((*MockStorageQueryClient)(nil).AvailableSpace), varargs...)
}

// File mocks base method.
func (m *MockStorageQueryClient) File(ctx context.Context, in *types0.QueryFile, opts ...grpc.CallOption) (*types0.QueryFileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "File", varargs...)
	ret0, _ := ret[0].(*types0.QueryFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// File indicates an expected call of File.
func (mr *MockStorageQueryClientMockRecorder) File(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "File", reflect.TypeOf((*MockStorageQueryClient)(nil).File), varargs...)
}

// FileUploadCheck mocks base method.
func (m *MockStorageQueryClient) FileUploadCheck(ctx context.Context, in *types0.QueryFileUploadCheck, opts ...grpc.CallOption) (*types0.QueryFileUploadCheckResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FileUploadCheck", varargs...)
	ret0, _ := ret[0].(*types0.QueryFileUploadCheckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FileUploadCheck indicates an expected call of FileUploadCheck.
func (mr *MockStorageQueryClientMockRecorder) FileUploadCheck(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileUploadCheck", reflect.TypeOf((*MockStorageQueryClient)(nil).FileUploadCheck), varargs...)
}

// FilesFromNote mocks base method.
func (m *MockStorageQueryClient) FilesFromNote(ctx context.Context, in *types0.QueryFilesFromNote, opts ...grpc.CallOption) (*types0.QueryFilesFromNoteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FilesFromNote", varargs...)
	ret0, _ := ret[0].(*types0.QueryFilesFromNoteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilesFromNote indicates an expected call of FilesFromNote.
func (mr *MockStorageQueryClientMockRecorder) FilesFromNote(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilesFromNote", reflect.TypeOf((*MockStorageQueryClient)(nil).FilesFromNote), varargs...)
}

// FindFile mocks base method.
func (m *MockStorageQueryClient) FindFile(ctx context.Context, in *types0.QueryFindFile, opts ...grpc.CallOption) (*types0.QueryFindFileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindFile", varargs...)
	ret0, _ := ret[0].(*types0.QueryFindFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFile indicates an expected call of FindFile.
func (mr *MockStorageQueryClientMockRecorder) FindFile(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFile", reflect.TypeOf((*MockStorageQueryClient)(nil).FindFile), varargs...)
}

// FreeSpace mocks base method.
func (m *MockStorageQueryClient) FreeSpace(ctx context.Context, in *types0.QueryFreeSpace, opts ...grpc.CallOption) (*types0.QueryFreeSpaceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FreeSpace", varargs...)
	ret0, _ := ret[0].(*types0.QueryFreeSpaceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FreeSpace indicates an expected call of FreeSpace.
func (mr *MockStorageQueryClientMockRecorder) FreeSpace(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FreeSpace", reflect.TypeOf((*MockStorageQueryClient)(nil).FreeSpace), varargs...)
}

// Gauges mocks base method.
func (m *MockStorageQueryClient) Gauges(ctx context.Context, in *types0.QueryAllGauges, opts ...grpc.CallOption) (*types0.QueryAllGaugesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Gauges", varargs...)
	ret0, _ := ret[0].(*types0.QueryAllGaugesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gauges indicates an expected call of Gauges.
func (mr *MockStorageQueryClientMockRecorder) Gauges(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gauges", reflect.TypeOf((*MockStorageQueryClient)(nil).Gauges), varargs...)
}

// GetClientFreeSpace mocks base method.
func (m *MockStorageQueryClient) GetClientFreeSpace(ctx context.Context, in *types0.QueryClientFreeSpace, opts ...grpc.CallOption) (*types0.QueryClientFreeSpaceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetClientFreeSpace", varargs...)
	ret0, _ := ret[0].(*types0.QueryClientFreeSpaceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientFreeSpace indicates an expected call of GetClientFreeSpace.
func (mr *MockStorageQueryClientMockRecorder) GetClientFreeSpace(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientFreeSpace", reflect.TypeOf((*MockStorageQueryClient)(nil).GetClientFreeSpace), varargs...)
}

// GetPayData mocks base method.
func (m *MockStorageQueryClient) GetPayData(ctx context.Context, in *types0.QueryPayData, opts ...grpc.CallOption) (*types0.QueryPayDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPayData", varargs...)
	ret0, _ := ret[0].(*types0.QueryPayDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayData indicates an expected call of GetPayData.
func (mr *MockStorageQueryClientMockRecorder) GetPayData(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayData", reflect.TypeOf((*MockStorageQueryClient)(nil).GetPayData), varargs...)
}

// NetworkSize mocks base method.
func (m *MockStorageQueryClient) NetworkSize(ctx context.Context, in *types0.QueryNetworkSize, opts ...grpc.CallOption) (*types0.QueryNetworkSizeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NetworkSize", varargs...)
	ret0, _ := ret[0].(*types0.QueryNetworkSizeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkSize indicates an expected call of NetworkSize.
func (mr *MockStorageQueryClientMockRecorder) NetworkSize(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkSize", reflect.TypeOf((*MockStorageQueryClient)(nil).NetworkSize), varargs...)
}

// OpenFiles mocks base method.
func (m *MockStorageQueryClient) OpenFiles(ctx context.Context, in *types0.QueryOpenFiles, opts ...grpc.CallOption) (*types0.QueryAllFilesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OpenFiles", varargs...)
	ret0, _ := ret[0].(*types0.QueryAllFilesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenFiles indicates an expected call of OpenFiles.
func (mr *MockStorageQueryClientMockRecorder) OpenFiles(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenFiles", reflect.TypeOf((*MockStorageQueryClient)(nil).OpenFiles), varargs...)
}

// Params mocks base method.
func (m *MockStorageQueryClient) Params(ctx context.Context, in *types0.QueryParams, opts ...grpc.CallOption) (*types0.QueryParamsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Params", varargs...)
	ret0, _ := ret[0].(*types0.QueryParamsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Params indicates an expected call of Params.
func (mr *MockStorageQueryClientMockRecorder) Params(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Params", reflect.TypeOf((*MockStorageQueryClient)(nil).Params), varargs...)
}

// PriceCheck mocks base method.
func (m *MockStorageQueryClient) PriceCheck(ctx context.Context, in *types0.QueryPriceCheck, opts ...grpc.CallOption) (*types0.QueryPriceCheckResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PriceCheck", varargs...)
	ret0, _ := ret[0].(*types0.QueryPriceCheckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PriceCheck indicates an expected call of PriceCheck.
func (mr *MockStorageQueryClientMockRecorder) PriceCheck(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PriceCheck", reflect.TypeOf((*MockStorageQueryClient)(nil).PriceCheck), varargs...)
}

// Proof mocks base method.
func (m *MockStorageQueryClient) Proof(ctx context.Context, in *types0.QueryProof, opts ...grpc.CallOption) (*types0.QueryProofResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Proof", varargs...)
	ret0, _ := ret[0].(*types0.QueryProofResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Proof indicates an expected call of Proof.
func (mr *MockStorageQueryClientMockRecorder) Proof(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Proof", reflect.TypeOf((*MockStorageQueryClient)(nil).Proof), varargs...)
}

// ProofsByAddress mocks base method.
func (m *MockStorageQueryClient) ProofsByAddress(ctx context.Context, in *types0.QueryProofsByAddress, opts ...grpc.CallOption) (*types0.QueryProofsByAddressResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProofsByAddress", varargs...)
	ret0, _ := ret[0].(*types0.QueryProofsByAddressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProofsByAddress indicates an expected call of ProofsByAddress.
func (mr *MockStorageQueryClientMockRecorder) ProofsByAddress(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProofsByAddress", reflect.TypeOf((*MockStorageQueryClient)(nil).ProofsByAddress), varargs...)
}

// Provider mocks base method.
func (m *MockStorageQueryClient) Provider(ctx context.Context, in *types0.QueryProvider, opts ...grpc.CallOption) (*types0.QueryProviderResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Provider", varargs...)
	ret0, _ := ret[0].(*types0.QueryProviderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Provider indicates an expected call of Provider.
func (mr *MockStorageQueryClientMockRecorder) Provider(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Provider", reflect.TypeOf((*MockStorageQueryClient)(nil).Provider), varargs...)
}

// Report mocks base method.
func (m *MockStorageQueryClient) Report(ctx context.Context, in *types0.QueryReport, opts ...grpc.CallOption) (*types0.QueryReportResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Report", varargs...)
	ret0, _ := ret[0].(*types0.QueryReportResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Report indicates an expected call of Report.
func (mr *MockStorageQueryClientMockRecorder) Report(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Report", reflect.TypeOf((*MockStorageQueryClient)(nil).Report), varargs...)
}

// StoragePaymentInfo mocks base method.
func (m *MockStorageQueryClient) StoragePaymentInfo(ctx context.Context, in *types0.QueryStoragePaymentInfo, opts ...grpc.CallOption) (*types0.QueryStoragePaymentInfoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StoragePaymentInfo", varargs...)
	ret0, _ := ret[0].(*types0.QueryStoragePaymentInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoragePaymentInfo indicates an expected call of StoragePaymentInfo.
func (mr *MockStorageQueryClientMockRecorder) StoragePaymentInfo(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoragePaymentInfo", reflect.TypeOf((*MockStorageQueryClient)(nil).StoragePaymentInfo), varargs...)
}

// StorageStats mocks base method.
func (m *MockStorageQueryClient) StorageStats(ctx context.Context, in *types0.QueryStorageStats, opts ...grpc.CallOption) (*types0.QueryStorageStatsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StorageStats", varargs...)
	ret0, _ := ret[0].(*types0.QueryStorageStatsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageStats indicates an expected call of StorageStats.
func (mr *MockStorageQueryClientMockRecorder) StorageStats(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageStats", reflect.TypeOf((*MockStorageQueryClient)(nil).StorageStats), varargs...)
}

// StoreCount mocks base method.
func (m *MockStorageQueryClient) StoreCount(ctx context.Context, in *types0.QueryStoreCount, opts ...grpc.CallOption) (*types0.QueryStoreCountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StoreCount", varargs...)
	ret0, _ := ret[0].(*types0.QueryStoreCountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreCount indicates an expected call of StoreCount.
func (mr *MockStorageQueryClientMockRecorder) StoreCount(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreCount", reflect.TypeOf((*MockStorageQueryClient)(nil).StoreCount), varargs...)
}

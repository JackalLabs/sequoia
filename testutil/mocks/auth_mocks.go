// Code generated by MockGen. DO NOT EDIT.
// Source: auth.go
//
// Generated by this command:
//
//	mockgen -source=auth.go
//

// Package mock_mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	types "github.com/cosmos/cosmos-sdk/x/auth/types"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockAuthQueryClient is a mock of AuthQueryClient interface.
type MockAuthQueryClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthQueryClientMockRecorder
	isgomock struct{}
}

// MockAuthQueryClientMockRecorder is the mock recorder for MockAuthQueryClient.
type MockAuthQueryClientMockRecorder struct {
	mock *MockAuthQueryClient
}

// NewMockAuthQueryClient creates a new mock instance.
func NewMockAuthQueryClient(ctrl *gomock.Controller) *MockAuthQueryClient {
	mock := &MockAuthQueryClient{ctrl: ctrl}
	mock.recorder = &MockAuthQueryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthQueryClient) EXPECT() *MockAuthQueryClientMockRecorder {
	return m.recorder
}

// Account mocks base method.
func (m *MockAuthQueryClient) Account(ctx context.Context, in *types.QueryAccountRequest, opts ...grpc.CallOption) (*types.QueryAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Account", varargs...)
	ret0, _ := ret[0].(*types.QueryAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Account indicates an expected call of Account.
func (mr *MockAuthQueryClientMockRecorder) Account(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Account", reflect.TypeOf((*MockAuthQueryClient)(nil).Account), varargs...)
}

// Accounts mocks base method.
func (m *MockAuthQueryClient) Accounts(ctx context.Context, in *types.QueryAccountsRequest, opts ...grpc.CallOption) (*types.QueryAccountsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Accounts", varargs...)
	ret0, _ := ret[0].(*types.QueryAccountsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Accounts indicates an expected call of Accounts.
func (mr *MockAuthQueryClientMockRecorder) Accounts(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accounts", reflect.TypeOf((*MockAuthQueryClient)(nil).Accounts), varargs...)
}

// ModuleAccountByName mocks base method.
func (m *MockAuthQueryClient) ModuleAccountByName(ctx context.Context, in *types.QueryModuleAccountByNameRequest, opts ...grpc.CallOption) (*types.QueryModuleAccountByNameResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModuleAccountByName", varargs...)
	ret0, _ := ret[0].(*types.QueryModuleAccountByNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModuleAccountByName indicates an expected call of ModuleAccountByName.
func (mr *MockAuthQueryClientMockRecorder) ModuleAccountByName(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModuleAccountByName", reflect.TypeOf((*MockAuthQueryClient)(nil).ModuleAccountByName), varargs...)
}

// Params mocks base method.
func (m *MockAuthQueryClient) Params(ctx context.Context, in *types.QueryParamsRequest, opts ...grpc.CallOption) (*types.QueryParamsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Params", varargs...)
	ret0, _ := ret[0].(*types.QueryParamsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Params indicates an expected call of Params.
func (mr *MockAuthQueryClientMockRecorder) Params(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Params", reflect.TypeOf((*MockAuthQueryClient)(nil).Params), varargs...)
}
